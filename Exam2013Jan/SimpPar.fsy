%{
(*	File ListC/CPar.fsy 
	Parser specification for list-C, a small imperative language with lists
	sestoft@itu.dk * 2009-10-18
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn;

%}

%token <string> NAME
%token <int> CSTINT INANA INDIGI INCOUNT OUTANA OUTDIGI
%token COLON SEMI COLONEQUAL
%token FALSE TRUE
%token IF GOTO SLEEP
%token PLUS MINUS
%token EQ NE LT
%token AND NOT OR
%token LPAR RPAR
%token EOF


%left OR
%left AND
%nonassoc NOT
%left EQ NE
%nonassoc LT
%left PLUS MINUS

%start Main
%type <Absyn.program> Main 

%%

Main: 
  Labels EOF            { $1 }
;

Labels:
                        { [] }
  | Label Labels        { $1 :: $2 }
;
Label:
  NAME COLON Block        { (lab $1, $3) }
;

Block:
                        { [] }
  | Cmd SEMI Block    {$1 :: $3}
;

Cmd:
    Output COLONEQUAL Expr    {Set($1, $3)}
  | GOTO NAME                 {Goto($2)}
  | IF Expr GOTO NAME         {If($2, $4)}
  | SLEEP CSTINT              {Sleep($2)}
;

Output:
    OUTDIGI                   {Od $1}
  | OUTANA                    {Oa $1}
;

Expr:
   CSTINT                    { CstI $1}
  | Expr PLUS Expr            { Prim2("+", $1, $3) }
  | Expr MINUS Expr           { Prim2("-", $1, $3) }
  | Expr EQ Expr              { Prim2("=", $1, $3) }
  | Expr NE Expr             { Prim2("<>", $1, $3) }
  | Expr LT Expr             { Prim2("<", $1, $3) }
  | Expr AND Expr             { Prim2("and", $1, $3) }
  | Expr OR Expr             { Prim2("or", $1, $3) }
  | TRUE                      { True }
  | FALSE                     { False }
  | Input                     { $1 }
  | NOT Expr                  { Prim1("not", $2)}
  | LPAR Expr RPAR            {$2}
;

Input:
    INANA                     { Ia $1 }
  | INDIGI                    { Id $1 }
  | INCOUNT                   { Cd $1 }
;





