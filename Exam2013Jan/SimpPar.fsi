// Signature file for parser generated by fsyacc
module SimpPar
type token = 
  | EOF
  | LPAR
  | RPAR
  | AND
  | NOT
  | OR
  | EQ
  | NE
  | LT
  | PLUS
  | MINUS
  | IF
  | GOTO
  | SLEEP
  | FALSE
  | TRUE
  | COLON
  | SEMI
  | COLONEQUAL
  | CSTINT of (int)
  | INANA of (int)
  | INDIGI of (int)
  | INCOUNT of (int)
  | OUTANA of (int)
  | OUTDIGI of (int)
  | NAME of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_IF
    | TOKEN_GOTO
    | TOKEN_SLEEP
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_COLON
    | TOKEN_SEMI
    | TOKEN_COLONEQUAL
    | TOKEN_CSTINT
    | TOKEN_INANA
    | TOKEN_INDIGI
    | TOKEN_INCOUNT
    | TOKEN_OUTANA
    | TOKEN_OUTDIGI
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Labels
    | NONTERM_Label
    | NONTERM_Block
    | NONTERM_Cmd
    | NONTERM_Output
    | NONTERM_Expr
    | NONTERM_Input
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.program) 
