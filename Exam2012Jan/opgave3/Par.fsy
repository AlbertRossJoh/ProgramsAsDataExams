%{
(*	File ListC/CPar.fsy 
	Parser specification for list-C, a small imperative language with lists
	sestoft@itu.dk * 2009-10-18
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn;

%}

%token <string> NAME
%token <int> CSTINT 
%token COLON TO COMMA
%token EOF
%token STATES TRANSITIONS PAYMENTS
%token WHILE UPON RECEIVE PAY
%token PER YEAR MONTH




%start Main
%type <Absyn.pension> Main 

%%

Main: 
  STATES States TRANSITIONS Transitions PAYMENTS Payments       { ($2, $4, $6) }
;


States:
                        { [] }
  | NAME COMMA States   { $1 :: $3}
  | NAME                { [$1] }
;

Transitions:
                                        { [] }
  | NAME COLON NAME TO NAME Transitions { ($1, ($3, $5)) :: $6}
;

Dir:
    PAY                                 { Pay }
  | RECEIVE                             { Receive }
;

Time:
    MONTH                               { PerMonth }
  | YEAR                                { PerYear }
;

Payments:
                                        { [] }
  | WHILE NAME Dir CSTINT PER Time Payments { Stream($2, $3, $4, $6) :: $7 }
  | UPON NAME Dir CSTINT Payments       { Lumpsum($2, $3, $4) :: $5 }
;

