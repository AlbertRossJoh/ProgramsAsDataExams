// Signature file for parser generated by fsyacc
module Par
type token = 
  | PER
  | YEAR
  | MONTH
  | WHILE
  | UPON
  | RECEIVE
  | PAY
  | STATES
  | TRANSITIONS
  | PAYMENTS
  | EOF
  | COLON
  | TO
  | COMMA
  | CSTINT of (int)
  | NAME of (string)
type tokenId = 
    | TOKEN_PER
    | TOKEN_YEAR
    | TOKEN_MONTH
    | TOKEN_WHILE
    | TOKEN_UPON
    | TOKEN_RECEIVE
    | TOKEN_PAY
    | TOKEN_STATES
    | TOKEN_TRANSITIONS
    | TOKEN_PAYMENTS
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_TO
    | TOKEN_COMMA
    | TOKEN_CSTINT
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_States
    | NONTERM_Transitions
    | NONTERM_Dir
    | NONTERM_Time
    | NONTERM_Payments
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.pension) 
